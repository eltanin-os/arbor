.Dd April 7, 2023
.Dt S6-RC-FAQ 7
.Os
.Sh NAME
.Nm s6-rc-faq
.Nd s6-rc FAQ
.Sh DESCRIPTION
.Ss Quick recipes
.Sy How do I...
.Bl -bullet
.It
list every active service?
.Bd -literal
s6-rc -a list
.Ed
.It
list every service in the current live database, active or not?
.Bd -literal
s6-rc -d list
.Ed
.Pp
or
.Bd -literal
s6-rc-db list services
.Ed
.It
bring up service
.Ql foo ?
.Bd -literal
s6-rc -u change foo
.Ed
.It
bring down everything?
.Bd -literal
s6-rc -da change
.Ed
.It
print the
.Pa up
script for oneshot service
.Ql foo ?
.Bd -literal
s6-rc-db -u script foo | xargs -0 printf "%s "
.Ed
.It
see what pipeline longrun service
.Ql foo
is a part of?
.Bd -literal
s6-rc-db pipeline foo
.Ed
.It
see the list of all services that depend on
.Ql foo ,
directly or indirectly?
.Bd -literal
s6-rc-db -d all-dependencies foo
.Ed
.It
see what services will restart if I update my live service database to
.Pa newcompiled ?
.Bd -literal
s6-rc-update -n newcompiled
.Ed
.El
.Pp
The first line is the
.Xr s6-rc 8
invocation that will bring the old services down.
The services that will stop are listed after
.Ql -- change .
The second line is the
.Xr s6-rc 8
invocation that will bring the new services up.
The services that will start are listed after
.Ql -- change .
.Ss The s6-rc-compile source format
.Bl -bullet
.It
The source format for
.Xr s6-rc-compile 8
is not very convenient.
Why not put all the information for a service in a single file?
.Pp
Because parsing sucks.
Writing parsers is an annoying, ungrateful task, with significant
risks of bugs and security holes; and automatic parser generators
produce big and inefficient code \(em and they are not immune to bugs
or security holes either.
For security, efficiency and maintainability reasons, I prefer to
focus my efforts on code that actually does stuff, not code that
parses a text file.
.Pp
Using the filesystem as a key-value store is a good technique to avoid
parsing, and skarnet.org packages do it everywhere: for instance,
.Xr s6-envdir 8
uses the file name as a key and the file contents as a value.
The
.Xr s6-rc-compile 8
source format is just another instance of this technique.
.Pp
The source format generally plays well with automated tools, be it for
reading, as
.Xr s6-rc-compile 8
does, or for writing.
I fully expect it to be used as the input
.Po
resp. the output
.Pc
of some automated tools that would convert service definitions to
.Po
resp. from
.Pc
another format, such as systemd unit files, sysv-rc scripts or OpenRC
scripts; at least the s6-rc source format will make it easy on those
tools.
.Pp
And if you love configuration files, are ok with writing a parser
.Po
which is indubitably easier to do in other languages than C
.Pc ,
and want to write a program that takes a text file, parses it and
outputs a service definition directory in the
.Xr s6-rc-compile 9
source format, it should also be rather easy \(em please, feel free!
.It
There are no
.Dq Provides: ,
no virtual services.
What do I do if I have several implementations for a service?
.Pp
Use bundles.
Bundles are the solution to most of the questions in the same vein.
.Pp
Let's say you want to provide a ssh daemon, and have two possible
implementations, opensshd and dropbear, but you want to provide a
virtual service named
.Ql sshd .
.Pp
Define your two longruns,
.Ql opensshd
and
.Ql dropbear ;
then define a bundle named
.Ql sshd
that only contains your default implementation, opensshd.
Use the name
.Ql sshd
in your dependencies.
When you run
.Xr s6-rc-compile 8 ,
all the dependencies will resolve to
.Ql opensshd ,
and the compiled service database will consider
.Ql opensshd
to be the
.Dq real
service; but users will still be able to run
.Xr s6-rc 8
commands involving
.Ql sshd .
And if you want to change the default to
.Ql dropbear ,
just change the
.Pa sshd/contents
file to
.Ql dropbear ,
recompile the database, and run
.Xr s6-rc-update 8 .
.Pp
The advantage of proceeding this way is that online service
dependencies are kept very simple: dependencies are a directed acyclic
graph, which is easy to handle \(em that is the reason why the
compiled database is small, and why the
.Xr s6-rc 8
program is so small and fast.
There are
.Dq AND
dependencies, but no
.Dq OR
dependencies, which would introduce great complexity both in data
structures and in the dependency resolution engine.
.Xr s6-rc 8
handles this complexity
.Em offline .
.Pp
You can use bundles to represent any collection of services, and write
all your dependencies using only bundle names if you want.
Bundles have multiple uses, and virtual services are definitely one of
them.
.El
.Ss Managing compiled databases
.Bl -bullet
.It
How do I safely update my compiled database?  It is a directory, so I
cannot atomically replace my old database with the new one.
.Pp
Use symbolic links.
You can atomically replace a symbolic link, and the s6-rc programs
have been designed with that mechanism in mind.
Here is the simplest way of managing your compiled databases:
.Po
change the names according to your preferences, but keep the same idea
.Pc
.Bl -bullet
.It
Make sure your
.Xr s6-rc-init 8
invocation, in your init scripts, always uses the
.Pa /etc/s6-rc/compiled
name to refer to the database to use at boot time.
.It
Make sure
.Pa /etc/s6-rc/compiled
is a
.Em symbolic link
that points to your current compiled database.
For instance, the first time you compile a service database, you could
run:
.Bd -literal
s6-rc-compile /etc/s6-rc/compiled-initial /etc/s6-rc/source-initial
ln -sf compiled-initial /etc/s6-rc/compiled
.Ed
.It
When you compile a new service database, always compile it to a unique
name, preferrably in the same directory as your current compiled
database.
You can for instance use a TAI64N timestamp, obtained by
.Xr s6-clock 1 ,
to create such a name:
.Bd -literal
stamp=`s6-clock`
s6-rc-compile /etc/s6-rc/compiled-$stamp /etc/s6-rc/source-current
.Ed
.It
To replace your current compiled database with the one you just created, run
.Xr s6-rc-update 8
on the new name:
.Bd -literal
s6-rc-update /etc/s6-rc/compiled-$stamp
.Ed
.It
At this point, your current database is the new one, but if your
machine reboots, it will still use the old one
.Po
because the
.Pa /etc/s6-rc/compiled
link is still pointing to the old one
.Pc .
To ensure that the new database will be used on the next boot,
atomically update the link:
.Bd -literal
olddb=`s6-linkname -f /etc/s6-rc/compiled`
s6-ln -nsf compiled-$stamp /etc/s6-rc/compiled
.Ed
.It
The use of the
.Xr s6-ln 1
utility is recommended, because the ln standard[1] actually
.Em forbids
an atomic replacement, so utilities that follow it to the letter, for
instance,
.Pa ln
from GNU coreutils, cannot be atomic: they first remove the old link,
then create the new one.
If you do not have
.Xr s6-ln 1 ,
you need to perform an unintuitive workaround to get POSIX-compliant
tools to do the right thing:
.Bd -literal
ln -sf compiled-$stamp /etc/s6-rc/compiled/compiled && mv -f /etc/s6-rc/compiled/compiled /etc/s6-rc
.Ed
.It
Your current compiled database, stored in
.Pa /etc/s6-rc/compiled-$stamp ,
is now accessible via the
.Pa /etc/s6-rc/compiled symlink
and will be used at boot time.
You do not need to modify your init scripts.
If you wish, you can dispose of the old database you just replaced:
.Bd -literal
rm -rf $olddb
.Ed
.El
.El
.Ss Switching from another service manager
.Bl -bullet
.It
I have a collection of init scripts in another format, but don't want
to wait until the whole collection is converted before switching to
s6-rc.
Is there a smooth way in?
.Pp
Yes.
.Pp
If you are using a service manager such as sysv-rc or OpenRC, you have
a collection of init scripts that can be called with at least
.Ql start
and
.Ql stop
arguments.
You also know dependencies between those scripts, or at least a
reasonable ordering.
.Pp
You can automatically generate a source directory for
.Xr s6-rc-compile 8 .
For every init script
.Pa /etc/init.d/ Ns Ar foo
that you have, create a service definition directory named
.Pa foo :
.Bl -bullet
.It
.Ar foo Ns /type
contains
.Ql oneshot .
.It
.Ar foo Ns /dependencies
contains the list of dependencies for
.Ar foo .
.It
.Ar foo Ns /up
contains
.Bd -literal
/etc/init.d/foo start
.Ed
.Pp
if you're using sysv-rc, or
.Bd -literal
rc-service start foo -D -q
.Ed
.Pp
if you're using OpenRC.
.It
.Ar foo Ns /down
contains
.Bd -literal
/etc/init.d/foo stop
.Ed
.Pp
if you're using sysv-rc, or
.Bd -literal
rc-service stop foo -D -q
.Ed
.Pp
if you're using OpenRC.
.El
.Pp
You can now compile your s6-rc service database, and use the
.Xr s6-rc 8
engine as your service manager.
Transitions will use your original init scripts, and the supervision
features of s6[2] will not be used, but you will get proper dependency
tracking and easy state changes.
.Pp
Then, you can improve the database by changing services one by one,
turning them into longruns so daemons get supervised when applicable,
rewriting them into bundles calling more atomic services if needed,
etc.
That can be done at your own pace, one service at a time, while still
getting some benefits from s6-rc; and if an iteration doesn't work,
you can always roll back while you fix it.
.It
There are no runlevels in s6-rc.
I like runlevels.
.Pp
You have better than runlevels.
You have bundles.
.Pp
When writing your service database in source format, take note of the
common sets of services that you like to run together, what other init
systems sometimes call runlevels.
For each of those sets, define a bundle containing all those services.
For instance, you could define a
.Ql runlevel-1
bundle that contains only a single getty, a
.Ql runlevel-2
bundle that contains only your local services and no network, a
.Ql runlevel-3
bundle that contains
.Ql runlevel-2
as well as network services, and a
.Ql runlevel-5
bundle that contains
.Ql runlevel-3
and your desktop.
You can even create a
.Ql runlevel-0
bundle that contains nothing at all!
.Pp
In your boot script
.Po
.Pa /etc/rc.init ,
for instance, if you're using
.Xr s6-linux-init 8
.Pc ,
after invoking
.Xr s6-rc-init 8 ,
just ask
.Xr s6-rc 8
to start the set of services you want up by default:
.Bd -literal
s6-rc change runlevel-5
.Ed
.Pp
If you later want to change your current set of services, you can then
tell
.Xr s6-rc 8
to switch, using the
.Fl p
option to make sure to stop services you don't want up anymore:
.Bd -literal
s6-rc -p change runlevel-2
.Ed
.Pp
Bundles are easy to use, they're flexible, and they're powerful.
They give you the same level of functionality as runlevels would, and
more.
You can even add bundles to compiled service databases \(em including
the live one \(em or remove bundles from them without having to
recompile them: that's what the
.Xr s6-rc-bundle 8
utility is for.
.Pp
When in doubt, use bundles.
.It
There are no intermediate states in s6-rc.
There's just
.Dq up
and
.Dq down ,
no
.Dq starting ,
no
.Dq failed , etc.
Why?
.Pp
Because those intermediate states are unnecessary.
.Pp
From the machine's point of view, things are simple: a service is
either up or it's not.
If a service fails to start, then it's still down.
Note that it is recommended to write
.Em transactional
oneshots for this very reason: it is simple to try starting again a
service that failed to start, but it is hard to recover from a service
that is only
.Dq partially up
\(em and this is true whether you're using
.Xr s6-rc 8
or another service manager.
.Pp
Service managers that use intermediate states do so in order to keep
track of what they're doing and what they have done.
But this introduces needless complexity: the reality is that the
service is either up or down, it's either in the state you wanted it
to be or not.
If it's in some other, weird, state, then the service scripts have not
been properly designed \(em they are not transactional.
.Pp
.Xr s6-rc 8
does not keep track of
.Dq failed
states: a service that fails to start simply remains down, and
.Xr s6-rc 8
exits 1 to report that something went wrong.
To know what services failed to start, compare the result of
.Ql s6-rc -a list
against your expected machine state.
.Pp
The reason for this design is simple: if the
.Xr s6-rc 8
process is killed in the middle of a transition while a service state is
.Dq starting ,
what should the next invocation do?
This is unclear, and the intermediate state introduces ambiguity where
there should not be.
Also, if there is a
.Dq failed
service, what should the next invocation do?
Try and restart it, or not?
This depends on what the user wants; this is policy, not mechanism.
Simply reporting the error while keeping the state as
.Dq down
allows users to apply their chosen policies \(em see below.
.Pp
Keep it simple, stupid.
.El
.Ss Mechanism vs. policy
.Bl -bullet
.It
s6-rc feels bare: there are tools, but no wrappers, no pre-packaged
scripts to boot my machines, no default runlevels.
By comparison, OpenRC provides a complete default set of scripts!
.Pp
In the world of software development, it is important to distinguish
.Em mechanism
from
.Em policy .
Mechanism is
.Dq how do I perform the job ,
and should, theoretically, be addressed by software authors.
Policy is
.Dq what are the details of the job I perform, where should I put my files, what conventions do I use ,
and should, theoretically, be addressed by Unix distributions.
.Pp
Like the rest of skarnet.org software[3], s6-rc aims to provide
.Em mechanism, not policy :
it is OS-agnostic and distribution-agnostic.
Providing boot scripts, or anything of this kind, would go against
this principle; it is possible that a policy defined by software
conflicts with a policy defined by a distribution, for instance the
provided boot scripts do not match the distribution's needs, and so
the distributors have to patch the software!
.Pp
The s6-rc tools only provide mechanism, so they can be used as is by
individual users, or by a distribution.
They do not need to be patched.
It is up to distributions to provide their own policy surrounding
those tools, including complete service databases.
It is literally the distributors' job!
.Pp
OpenRC is a different case, because it was developed
.Em by
and
.Em for
a Linux distribution, so with that in mind, the OpenRC developers did
not have to think much about separating mechanism from policy.
It works very well for Gentoo and Gentoo-derived distributions; but it
requires adaptation and more work for the admin to use OpenRC outside
of that frame.
.El
.Sh SEE ALSO
.Xr s6-rc-overview 7 ,
.Xr s6-rc-why 7 ,
.Xr s6-rc 8 ,
.Xr s6-rc-bundle 8 ,
.Xr s6-rc-compile 8 ,
.Xr s6-rc-db 8 ,
.Xr s6-rc-fdholder-filler 8 ,
.Xr s6-rc-format-upgrade 8 ,
.Xr s6-rc-init 8 ,
.Xr s6-rc-oneshot-run 8 ,
.Xr s6-rc-update 8
.Pp
[1]
.Lk https://pubs.opengroup.org/onlinepubs/9699919799/utilities/ln.html
.Pp
[2]
.Lk https://skarnet.org/software/s6/
.Pp
[3]
.Lk https://skarnet.org/software/
.Pp
This man page is ported from the authoritative documentation at:
.Lk https://skarnet.org/software/s6-rc/faq.html
.Sh AUTHORS
.An Laurent Bercot
.An Alexis Ao Mt flexibeast@gmail.com Ac (man page port)
